"""Functions to generate locust code.

This module contains functions to generate locust code, *i.e.* it
defines tasks, tasksets and locusts.

"""

from typing import List, Tuple

from . import __version__ as wtgseal_version
from . import dist_name as wtgseal_dist_name
from . import dist_url as wtgseal_dist_url

# from .utils import count_requests, parse_objects

CmdDef = Tuple[int, str]
BlockDef = List[CmdDef]


def setup_header(*, dist: str = wtgseal_dist_name,
                 version: str = wtgseal_version,
                 url: str = wtgseal_dist_url) -> BlockDef:
    """Generate a simple header with dist, version and url information.

    Generate a program header citing the distribution name from where
    it was generated, the current version and the url where one can find
    further information.
    """
    header = []
    header.append((0,
                   f'# locust file generated by {dist} (release {version})'))
    header.append((0, f'# See {url} for more information'))
    return header


def setup_import() -> BlockDef:
    """Generate the import lines for a locust file.

    Generate code to import the modules needed for running a locust file

    Returns
    -------
    BlockDef
        [description]
    """
    imports = []
    imports.append((0, 'from locust import Locust, TaskSet, task'))
    return imports


def setup_task(prefix: str = 'task', id: int = None,
               weight: int = 1,
               uri: List[str] = ["/", ],
               indlevel: int = 0) -> BlockDef:
    """Generate code to define a locust task.

    Generate code to definie a locust task according to the given
    parameters.

    Parameters
    ----------
    uri : {List[str] = ["/", ]}
        A list of URIs, each starting with a backslash
        like "/index.html"
    prefix : {str}, optional
        A prefix for the function name (the default is 'task')
    id : {int}, optional
        A numeric identifier for the task (the default is None, which
        means that no id should be preprended to `prefix`)
    weight : {int}, optional
        The weight for the generated task (the default is 1)
    indlevel : {int}, optional
        The indentation level where the task definition should begin
        (the default is 0, which leads to code beginning at the left
        margin)

    Returns
    -------
    [type]
        [description]
    """
    task = []
    task.append((indlevel, f'@task({weight})'))
    task.append((indlevel, f'def {prefix}{id}(self):'))
    for req in uri:
        task.append((indlevel + 1, f'self.client.get("{req}")'))
    return task


if __name__ == "__main__":
    print(f'{wtgseal_dist_name=}')
    print(f'{wtgseal_version=}')
